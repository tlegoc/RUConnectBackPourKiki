AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: RUConnect app cloudformation stack

Parameters:
  RUConnectPlatsPictureStorageBucketName:
    Type: String
    Default: -images-plats
  RUConnectProfilePictureStorageBucketName:
    Type: String
    Default: -images-profils
  RUConnectCacheStorageBucketName:
    Type: String
    Default: -cache-bucket

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 5
    Runtime: python3.11
    Handler: app.lambda_handler
    Architectures:
      - x86_64
    Environment:
      Variables:
        CACHE_TIME: 120
        USER_TABLE: !Ref RUConnectUsersDB
        PLATS_TABLE: !Ref RUConnectPlatsDB
        RESTAURANTS_TABLE: !Ref RUConnectRestaurantsDB

Resources:
  RUConnectApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub "${AWS::StackName}-api"
      StageName: prod
      EndpointConfiguration:
        Type: REGIONAL
      Auth:
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !GetAtt RUConnectUserPool.Arn
      Cors:
        AllowMethods: "'GET,PUT,POST,DELETE,OPTIONS'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: "'*'"
      GatewayResponses:
        DEFAULT_4XX:
          ResponseParameters:
            Headers:
              Access-Control-Allow-Origin: "'*'"
              Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              Access-Control-Allow-Methods: "'GET,PUT,POST,DELETE,OPTIONS'"
        DEFAULT_5XX:
          ResponseParameters:
            Headers:
              Access-Control-Allow-Origin: "'*'"
              Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              Access-Control-Allow-Methods: "'GET,PUT,POST,DELETE,OPTIONS'"
      Models:
        SwipeModel:
          type: object
          required: [ feel, plat ]
          properties:
            feel:
              type: string
              enum: [ like, dislike ]
            plat:
              type: string
        FriendModel:
          type: object
          required: [ user ]
          properties:
            user:
              type: string

  #
  # COGNITO
  #

  RUConnectUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub "${AWS::StackName}-user-pool"
      AliasAttributes:
        - preferred_username
      UsernameConfiguration:
        CaseSensitive: True
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: False
          RequireNumbers: False
          RequireSymbols: False
          RequireUppercase: False
      LambdaConfig:
        PostConfirmation: !GetAtt PostConfirmSignUpFunction.Arn
        PreSignUp: !GetAtt PreSignUpFunction.Arn

  OnCognitoPostConfirmationSignUpPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt PostConfirmSignUpFunction.Arn
      Principal: cognito-idp.amazonaws.com
      SourceArn: !Sub arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${RUConnectUserPool}

  OnCognitoPreSignUpPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt PreSignUpFunction.Arn
      Principal: cognito-idp.amazonaws.com
      SourceArn: !Sub arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${RUConnectUserPool}

  RUConnectUserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      UserPoolId: !Ref RUConnectUserPool
      Domain: !Sub "${AWS::StackName}-prod-ruconnect-upd"

  RUConnectUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: !Sub "${AWS::StackName}-userpool-client"
      GenerateSecret: False
      UserPoolId: !Ref RUConnectUserPool
      ExplicitAuthFlows:
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_CUSTOM_AUTH
        - ALLOW_USER_SRP_AUTH

  #
  # DB
  #

  RUConnectUsersDB:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${AWS::StackName}-db-users"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: username
          AttributeType: S
      KeySchema:
        - AttributeName: username
          KeyType: HASH

  RUConnectPlatsDB:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${AWS::StackName}-db-plats"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH

  RUConnectRestaurantsDB:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${AWS::StackName}-db-restaurants"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH

  #
  # STUFF
  #

  # Dumb role to allow everything (bad idea)
  AllowAllRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - apigateway.amazonaws.com
                - dynamodb.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: AllowAllPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: '*'
                Resource: '*'

  # Pictures for plats
  RUConnectPlatsPictureStorage:
    Type: AWS::S3::Bucket
    DependsOn: RUConnectS3CallFunctionPermissionPlats
    Properties:
      BucketName: !Sub "${AWS::StackName}${RUConnectPlatsPictureStorageBucketName}"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: False
        BlockPublicPolicy: False
        IgnorePublicAcls: False
        RestrictPublicBuckets: False
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: 's3:ObjectCreated:*'
            Function: !GetAtt ResizePictureFunction.Arn
            Filter:
              S3Key:
                Rules:
                  - Name: prefix
                    Value: 'unprocessed'
      CorsConfiguration:
        CorsRules:
          - AllowedOrigins:
              - '*'
            AllowedMethods:
              - GET
              - PUT
              - POST
              - DELETE
              - HEAD
            AllowedHeaders:
              - '*'
            MaxAge: 3000

  # I know you're not supposed to do that but meh
  RUConnecctCacheStorage:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${AWS::StackName}${RUConnectCacheStorageBucketName}"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: False
        BlockPublicPolicy: False
        IgnorePublicAcls: False
        RestrictPublicBuckets: False
      CorsConfiguration:
        CorsRules:
          - AllowedOrigins:
              - '*'
            AllowedMethods:
              - GET
              - HEAD
            AllowedHeaders:
              - '*'
            MaxAge: 3000

  #  RUConnectProfilePictureStorage:
  #    Type: AWS::S3::Bucket
  #    DependsOn: RUConnectS3CallFunctionPermissionProfile
  #    Properties:
  #      BucketName: !Ref RUConnectProfilePictureStorageBucketName
  #      PublicAccessBlockConfiguration:
  #        BlockPublicAcls: False
  #        BlockPublicPolicy: False
  #        IgnorePublicAcls: False
  #        RestrictPublicBuckets: False
  #      NotificationConfiguration:
  #        LambdaConfigurations:
  #          - Event: 's3:ObjectCreated:*'
  #            Function: !GetAtt ResizePictureFunction.Arn
  #            Filter:
  #              S3Key:
  #                Rules:
  #                  - Name: prefix
  #                    Value: 'unprocessed'
  #      CorsConfiguration:
  #        CorsRules:
  #          - AllowedOrigins:
  #              - '*'
  #            AllowedMethods:
  #              - GET
  #              - PUT
  #              - POST
  #              - DELETE
  #              - HEAD
  #            AllowedHeaders:
  #              - '*'
  #            MaxAge: 3000

  # Allow bucket to call lambdas
  RUConnectS3CallFunctionPermissionPlats:
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref ResizePictureFunction
      Principal: s3.amazonaws.com
      SourceAccount: !Ref "AWS::AccountId"
      SourceArn: !Sub "arn:aws:s3:::${AWS::StackName}${RUConnectPlatsPictureStorageBucketName}"

  # Allow bucket to be read by other code
  RUConnectS3PublicPolicyPlats:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref RUConnectPlatsPictureStorage
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: PublicReadForGetBucketObjects
            Effect: Allow
            Principal: '*'
            Action: 's3:GetObject'
            Resource: !Sub 'arn:aws:s3:::${AWS::StackName}${RUConnectPlatsPictureStorageBucketName}/*'

  # Allow s3 bucket to call lambda functions
  #  RUConnectS3CallFunctionPermissionProfile:
  #    Type: AWS::Lambda::Permission
  #    Properties:
  #      Action: 'lambda:InvokeFunction'
  #      FunctionName: !Ref ResizePictureFunction
  #      Principal: s3.amazonaws.com
  #      SourceAccount: !Ref "AWS::AccountId"
  #      SourceArn: !Sub "arn:aws:s3:::${RUConnectProfilePictureStorageBucketName}"

  # To comment correctly, I forgot what it does
  #  RUConnectS3PublicPolicyProfile:
  #    Type: AWS::S3::BucketPolicy
  #    Properties:
  #      Bucket: !Ref RUConnectProfilePictureStorage
  #      PolicyDocument:
  #        Version: '2012-10-17'
  #        Statement:
  #          - Sid: PublicReadForGetBucketObjects
  #            Effect: Allow
  #            Principal: '*'
  #            Action: 's3:GetObject'
  #            Resource: !Sub 'arn:aws:s3:::${RUConnectProfilePictureStorageBucketName}/*'

  #
  # FUNCTIONS
  #

  HelloWorldFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}_lambda_hello_world"
      CodeUri: hello_world/
      Role: !GetAtt AllowAllRole.Arn
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /
            Method: get
            RestApiId: !Ref RUConnectApi

  # Creation of user in db after he's confirmed
  PostConfirmSignUpFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}_lambda_post_confirm_sign_up"
      CodeUri: post_confirm_sign_up/
      Role: !GetAtt AllowAllRole.Arn

  # AWS Lambda that checks user data before autovalidating them
  PreSignUpFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}_lambda_pre_sign_up"
      CodeUri: pre_sign_up/
      Role: !GetAtt AllowAllRole.Arn

  UpdatePlatLikenessFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}_lambda_update_plat_likeness"
      CodeUri: update_plat_likeness
      Role: !GetAtt AllowAllRole.Arn
      Layers:
        - !Ref DependenciesLayer
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /swipe
            Method: post
            RestApiId: !Ref RUConnectApi
            RequestModel:
              Model: SwipeModel
              ValidateBody: true

  DataGouvProxyFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}_lambda_data_gouv_proxy"
      CodeUri: data_gouv_proxy/
      Role: !GetAtt AllowAllRole.Arn
      Layers:
        - !Ref DependenciesLayer
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /datagouv/{ville}
            Method: get
            RestApiId: !Ref RUConnectApi

  GetSelfFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}_lambda_get_self"
      CodeUri: get_self/
      Role: !GetAtt AllowAllRole.Arn
      Layers:
        - !Ref DependenciesLayer
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /self
            Method: get
            RestApiId: !Ref RUConnectApi
            Auth:
              Authorizer: CognitoAuthorizer

  GetUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}_lambda_get_user"
      CodeUri: get_user/
      Role: !GetAtt AllowAllRole.Arn
      Layers:
        - !Ref DependenciesLayer
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /user/{user}
            Method: get
            RestApiId: !Ref RUConnectApi

  AddFriendFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}_lambda_add_friend"
      CodeUri: add_friend/
      Role: !GetAtt AllowAllRole.Arn
      Layers:
        - !Ref DependenciesLayer
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /addfriend
            Method: post
            RestApiId: !Ref RUConnectApi
            RequestModel:
              Model: FriendModel
              ValidateBody: true
            Auth:
              Authorizer: CognitoAuthorizer

  RemoveFriendFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}_lambda_remove_friend"
      CodeUri: remove_friend/
      Role: !GetAtt AllowAllRole.Arn
      Layers:
        - !Ref DependenciesLayer
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /removefriend
            Method: post
            RestApiId: !Ref RUConnectApi
            RequestModel:
              Model: FriendModel
              ValidateBody: true
            Auth:
              Authorizer: CognitoAuthorizer


  #  RequestPictureIDFunction:
  #    Type: AWS::Serverless::Function
  #    Properties:
  #      FunctionName: wei_app_lambda_request_picture_id
  #      CodeUri: request_picture_id/
  #      Role: !GetAtt AllowAllRole.Arn
  #      Environment:
  #        Variables:
  #          PICTURE_BUCKET: !Ref WeiAppPictureStorage
  #      Events:
  #        ApiEvent:
  #          Type: Api
  #          Properties:
  #            Path: /picture
  #            Method: post
  #            RestApiId: !Ref WeiAppApi
  #            Auth:
  #              Authorizer: CognitoAuthorizer
  #            RequestModel:
  #              Model: RequestPictureIDModel
  #              ValidateBody: true

  ResizePictureFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}_lambda_resize_picture"
      CodeUri: resize_picture/
      Role: !GetAtt AllowAllRole.Arn
      MemorySize: 1024
      Timeout: 10
  #      Layers:
  #        - !Ref PillowLayer

  #  DependenciesLayer:
  #    Type: AWS::Serverless::LayerVersion
  #    Properties:
  #      LayerName: DependenciesLayer
  #      ContentUri: dependencies/
  #      CompatibleRuntimes:
  #        - python3.11

  #
  # POST BUILD LAMBDA
  #
#  PostDeploymentFunction:
#    Type: AWS::Serverless::Function
#    Properties:
#      FunctionName: ruconnect_lambda_post_deployment_function
#      CodeUri: post_deploy/
#      Role: !GetAtt AllowAllRole.Arn
#      MemorySize: 1024
#      Timeout: 10
#
#  PostDeployEvent:
#    Type: AWS::CloudFormation::CustomResource
#    DependsOn: PostDeploymentFunction
#    Version: "1.0"
#    Properties:
#      ServiceToken: !GetAtt PostDeploymentFunction.Arn

  DependenciesLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: !Sub "${AWS::StackName}DependenciesLayer"
      ContentUri: dependencies/
      CompatibleRuntimes:
        - python3.11

Outputs:
  UserPoolClientID:
    Value: !Ref RUConnectUserPoolClient
    Description: User Pool Client ID
  ApiUrl:
    Value: !Sub https://${RUConnectApi}.execute-api.${AWS::Region}.amazonaws.com
    Description: API Endpoint URL